// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using ReactDemo.Server.Database;

#nullable disable

namespace ReactDemo.Server.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20250816123837_RemoveUserDateOfBirth")]
    partial class RemoveUserDateOfBirth
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.6")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "fdf41afb-4841-43b9-8642-b32179934a49",
                            Name = "User",
                            NormalizedName = "USER"
                        },
                        new
                        {
                            Id = "0428efdd-bbf9-44fa-bba3-0a1873af0e56",
                            Name = "Front Desk",
                            NormalizedName = "FRONTDESK"
                        },
                        new
                        {
                            Id = "b117d060-6194-4e16-8c49-f60bbf42ec3e",
                            Name = "Administrator",
                            NormalizedName = "ADMINISTRATOR"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);

                    b.HasData(
                        new
                        {
                            UserId = "80c4e17f-70dd-4aaa-bbc0-ac3fd88682bf",
                            RoleId = "b117d060-6194-4e16-8c49-f60bbf42ec3e"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("ReactDemo.Server.Database.AppUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "80c4e17f-70dd-4aaa-bbc0-ac3fd88682bf",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "0d980873-bba8-494d-bccd-9c382add5ce3",
                            Email = "admin@admin.com",
                            EmailConfirmed = true,
                            FirstName = "Borgo",
                            LastName = "Admin",
                            LockoutEnabled = false,
                            NormalizedEmail = "ADMIN@ADMIN.COM",
                            NormalizedUserName = "ADMIN@ADMIN.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEPZEaOw5bWUvUveioHkeHYmoJIP7PrcTBSx7vUtm81lUWd07XzOFnfmXuc3OLjBAiA==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "29aa48e7-318c-4455-9979-1e2716517fc6",
                            TwoFactorEnabled = false,
                            UserName = "admin@admin.com"
                        });
                });

            modelBuilder.Entity("ReactDemo.Server.Models.Booking", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("GuestId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("GuestId");

                    b.ToTable("Booking");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            GuestId = 1
                        },
                        new
                        {
                            Id = 2,
                            GuestId = 2
                        },
                        new
                        {
                            Id = 3,
                            GuestId = 3
                        },
                        new
                        {
                            Id = 4,
                            GuestId = 1
                        },
                        new
                        {
                            Id = 5,
                            GuestId = 4
                        },
                        new
                        {
                            Id = 6,
                            GuestId = 4
                        });
                });

            modelBuilder.Entity("ReactDemo.Server.Models.BookingRoom", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("BookingId")
                        .HasColumnType("int");

                    b.Property<DateOnly>("CheckInDate")
                        .HasColumnType("Date");

                    b.Property<DateOnly>("CheckOutDate")
                        .HasColumnType("Date");

                    b.Property<int>("NumberAdults")
                        .HasColumnType("int");

                    b.Property<int>("NumberChildren")
                        .HasColumnType("int");

                    b.Property<int>("RoomId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("BookingId");

                    b.HasIndex("RoomId");

                    b.ToTable("BookingRoom");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            BookingId = 1,
                            CheckInDate = new DateOnly(2025, 7, 20),
                            CheckOutDate = new DateOnly(2025, 7, 25),
                            NumberAdults = 2,
                            NumberChildren = 0,
                            RoomId = 1
                        },
                        new
                        {
                            Id = 2,
                            BookingId = 2,
                            CheckInDate = new DateOnly(2025, 7, 28),
                            CheckOutDate = new DateOnly(2025, 7, 31),
                            NumberAdults = 2,
                            NumberChildren = 1,
                            RoomId = 9
                        },
                        new
                        {
                            Id = 3,
                            BookingId = 2,
                            CheckInDate = new DateOnly(2025, 7, 28),
                            CheckOutDate = new DateOnly(2025, 7, 31),
                            NumberAdults = 1,
                            NumberChildren = 1,
                            RoomId = 11
                        },
                        new
                        {
                            Id = 4,
                            BookingId = 4,
                            CheckInDate = new DateOnly(2025, 9, 1),
                            CheckOutDate = new DateOnly(2025, 9, 10),
                            NumberAdults = 2,
                            NumberChildren = 0,
                            RoomId = 2
                        },
                        new
                        {
                            Id = 5,
                            BookingId = 3,
                            CheckInDate = new DateOnly(2025, 8, 1),
                            CheckOutDate = new DateOnly(2025, 8, 31),
                            NumberAdults = 1,
                            NumberChildren = 1,
                            RoomId = 3
                        },
                        new
                        {
                            Id = 6,
                            BookingId = 5,
                            CheckInDate = new DateOnly(2025, 9, 15),
                            CheckOutDate = new DateOnly(2025, 9, 16),
                            NumberAdults = 1,
                            NumberChildren = 1,
                            RoomId = 8
                        },
                        new
                        {
                            Id = 7,
                            BookingId = 6,
                            CheckInDate = new DateOnly(2025, 9, 15),
                            CheckOutDate = new DateOnly(2025, 9, 16),
                            NumberAdults = 1,
                            NumberChildren = 1,
                            RoomId = 13
                        },
                        new
                        {
                            Id = 8,
                            BookingId = 6,
                            CheckInDate = new DateOnly(2025, 9, 16),
                            CheckOutDate = new DateOnly(2025, 9, 20),
                            NumberAdults = 1,
                            NumberChildren = 1,
                            RoomId = 16
                        });
                });

            modelBuilder.Entity("ReactDemo.Server.Models.Guest", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Guest");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Email = "jess@test.com",
                            FirstName = "Jess",
                            LastName = "Day"
                        },
                        new
                        {
                            Id = 2,
                            Email = "nick@test.com",
                            FirstName = "Nick",
                            LastName = "Miller"
                        },
                        new
                        {
                            Id = 3,
                            Email = "schmidt@test.com",
                            FirstName = "Schmidt",
                            LastName = ""
                        },
                        new
                        {
                            Id = 4,
                            Email = "cece@test.com",
                            FirstName = "Cece",
                            LastName = "Parekh"
                        },
                        new
                        {
                            Id = 5,
                            Email = "winston@test.com",
                            FirstName = "Winston",
                            LastName = "Bishop"
                        });
                });

            modelBuilder.Entity("ReactDemo.Server.Models.Room", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("RoomNumber")
                        .HasColumnType("int");

                    b.Property<int>("RoomTypeId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("RoomTypeId");

                    b.ToTable("Room");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            RoomNumber = 101,
                            RoomTypeId = 1
                        },
                        new
                        {
                            Id = 2,
                            RoomNumber = 102,
                            RoomTypeId = 1
                        },
                        new
                        {
                            Id = 3,
                            RoomNumber = 103,
                            RoomTypeId = 1
                        },
                        new
                        {
                            Id = 4,
                            RoomNumber = 201,
                            RoomTypeId = 2
                        },
                        new
                        {
                            Id = 5,
                            RoomNumber = 202,
                            RoomTypeId = 2
                        },
                        new
                        {
                            Id = 6,
                            RoomNumber = 203,
                            RoomTypeId = 2
                        },
                        new
                        {
                            Id = 7,
                            RoomNumber = 301,
                            RoomTypeId = 3
                        },
                        new
                        {
                            Id = 8,
                            RoomNumber = 302,
                            RoomTypeId = 3
                        },
                        new
                        {
                            Id = 9,
                            RoomNumber = 303,
                            RoomTypeId = 3
                        },
                        new
                        {
                            Id = 10,
                            RoomNumber = 401,
                            RoomTypeId = 4
                        },
                        new
                        {
                            Id = 11,
                            RoomNumber = 402,
                            RoomTypeId = 4
                        },
                        new
                        {
                            Id = 12,
                            RoomNumber = 403,
                            RoomTypeId = 4
                        },
                        new
                        {
                            Id = 13,
                            RoomNumber = 501,
                            RoomTypeId = 5
                        },
                        new
                        {
                            Id = 14,
                            RoomNumber = 502,
                            RoomTypeId = 5
                        },
                        new
                        {
                            Id = 15,
                            RoomNumber = 503,
                            RoomTypeId = 5
                        },
                        new
                        {
                            Id = 16,
                            RoomNumber = 601,
                            RoomTypeId = 6
                        },
                        new
                        {
                            Id = 17,
                            RoomNumber = 602,
                            RoomTypeId = 6
                        },
                        new
                        {
                            Id = 18,
                            RoomNumber = 603,
                            RoomTypeId = 6
                        },
                        new
                        {
                            Id = 19,
                            RoomNumber = 701,
                            RoomTypeId = 7
                        },
                        new
                        {
                            Id = 20,
                            RoomNumber = 702,
                            RoomTypeId = 7
                        },
                        new
                        {
                            Id = 21,
                            RoomNumber = 703,
                            RoomTypeId = 7
                        },
                        new
                        {
                            Id = 22,
                            RoomNumber = 801,
                            RoomTypeId = 8
                        },
                        new
                        {
                            Id = 23,
                            RoomNumber = 802,
                            RoomTypeId = 8
                        },
                        new
                        {
                            Id = 24,
                            RoomNumber = 803,
                            RoomTypeId = 8
                        },
                        new
                        {
                            Id = 25,
                            RoomNumber = 901,
                            RoomTypeId = 9
                        },
                        new
                        {
                            Id = 26,
                            RoomNumber = 902,
                            RoomTypeId = 9
                        },
                        new
                        {
                            Id = 27,
                            RoomNumber = 903,
                            RoomTypeId = 9
                        });
                });

            modelBuilder.Entity("ReactDemo.Server.Models.RoomType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<decimal>("BasePrice")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("BedsDescription")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("ImageId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Size")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("SleepersCapacity")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("RoomType");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            BasePrice = 750.00m,
                            BedsDescription = "1 Queen bed",
                            Description = "1 Queen bed or 2 Twin beds – 25sqm / 269sqft. Balcony or window. Coastal view",
                            ImageId = 1,
                            Name = "Classic Courtyard",
                            Size = "25 sq m",
                            SleepersCapacity = 2
                        },
                        new
                        {
                            Id = 2,
                            BasePrice = 850.00m,
                            BedsDescription = "1 Queen bed",
                            Description = "1 Queen bed or 2 Twin beds – From 32 to 36sqm / From 345 to 388sqft. Window – Juliet balcony. Lateral Sea view/coastal view",
                            ImageId = 2,
                            Name = "Superior",
                            Size = "32 to 36 sq m",
                            SleepersCapacity = 2
                        },
                        new
                        {
                            Id = 3,
                            BasePrice = 1075.00m,
                            BedsDescription = "1 Queen bed",
                            Description = "1 Large Queen bed or 2 Twin beds – From 35 to 40sqm / From 377 to 431sqft. Sitting area – Desk. Balcony. Sea view",
                            ImageId = 3,
                            Name = "Deluxe with sea view balcony",
                            Size = "35 to 40 sq m",
                            SleepersCapacity = 2
                        },
                        new
                        {
                            Id = 4,
                            BasePrice = 1400.00m,
                            BedsDescription = "1 King bed",
                            Description = "1 King bed or 2 Twin beds – From 45 to 55sqm / From 485 to 582sqft. Sitting area – Desk. Big window – Sea view",
                            ImageId = 4,
                            Name = "Junior Suite",
                            Size = "45 to 55 sq m",
                            SleepersCapacity = 2
                        },
                        new
                        {
                            Id = 5,
                            BasePrice = 2100.00m,
                            BedsDescription = "1 King bed",
                            Description = "1 King bed or 2 Twin beds – From 65 to 75sqm / From 700 to 807sqft. Separate sitting area – Desk. Big window – Sea view",
                            ImageId = 5,
                            Name = "Corner Suite",
                            Size = "65 to 75 sq m",
                            SleepersCapacity = 3
                        },
                        new
                        {
                            Id = 6,
                            BasePrice = 2275.00m,
                            BedsDescription = "1 King bed",
                            Description = "1 King bed or 2 Twin beds – From 107 to 120sqm / From 1151 to 1291sqft. Separate living area – Desk. Private terrace – Sea view",
                            ImageId = 6,
                            Name = "Suite Deluxe with Terrace",
                            Size = "107 to 120 sq m",
                            SleepersCapacity = 3
                        },
                        new
                        {
                            Id = 7,
                            BasePrice = 2325.00m,
                            BedsDescription = "1 King bed",
                            Description = "1 King bed – 90sqm / 968sqft. Separate sitting area – Private terrace – Sea view. Private heated infinity plunge pool",
                            ImageId = 7,
                            Name = "Junior Suite sea view with Pool",
                            Size = "90 sq m",
                            SleepersCapacity = 2
                        },
                        new
                        {
                            Id = 8,
                            BasePrice = 2470.00m,
                            BedsDescription = "1 King bed",
                            Description = "1 King or 2 Twin beds – From 85 to 105qm. Separate living area – Desk. Private terrace – Sea view. Private heated infinity plunge pool",
                            ImageId = 8,
                            Name = "Suite Deluxe with Pool",
                            Size = "85 to 105 sq m",
                            SleepersCapacity = 3
                        },
                        new
                        {
                            Id = 9,
                            BasePrice = 2850.00m,
                            BedsDescription = "1 Queen bed",
                            Description = "1 King bed or 2 Twin beds – 105sqm / 1131sqft. Sitting area – Desk. Private terrace or garden – Sea view. Private heated infinity plunge pool",
                            ImageId = 9,
                            Name = "Premium Suite Pool",
                            Size = "105 sq m",
                            SleepersCapacity = 3
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("ReactDemo.Server.Database.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("ReactDemo.Server.Database.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ReactDemo.Server.Database.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("ReactDemo.Server.Database.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ReactDemo.Server.Models.Booking", b =>
                {
                    b.HasOne("ReactDemo.Server.Models.Guest", "Guest")
                        .WithMany()
                        .HasForeignKey("GuestId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Guest");
                });

            modelBuilder.Entity("ReactDemo.Server.Models.BookingRoom", b =>
                {
                    b.HasOne("ReactDemo.Server.Models.Booking", "Booking")
                        .WithMany()
                        .HasForeignKey("BookingId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ReactDemo.Server.Models.Room", "Room")
                        .WithMany()
                        .HasForeignKey("RoomId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Booking");

                    b.Navigation("Room");
                });

            modelBuilder.Entity("ReactDemo.Server.Models.Room", b =>
                {
                    b.HasOne("ReactDemo.Server.Models.RoomType", "RoomType")
                        .WithMany()
                        .HasForeignKey("RoomTypeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("RoomType");
                });
#pragma warning restore 612, 618
        }
    }
}
